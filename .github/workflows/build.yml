on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    types: [ "review_requested", "ready_for_review" ]
  workflow_dispatch:
name: CI
permissions:
  id-token: write
  contents: read
jobs:
  flatpak:
    name: "Flatpak"
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.user.login != 'weblate' }}
    container:
      image: bilelmoussaoui/flatpak-github-actions:gnome-44
      options: --privileged
    strategy:
      matrix:
        arch: [x86_64]
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
      - uses: DaPigGuy/flatpak-github-actions/flatpak-builder@master
        with:
          bundle: org.nickvision.tubeconverter.flatpak
          manifest-path: NickvisionTubeConverter.GNOME/org.nickvision.tubeconverter.json
          cache-key: flatpak-builder-${{ github.sha }}
          arch: ${{ matrix.arch }}
          restore-cache: true
  winui:
    name: "WinUI"
    strategy:
      matrix:
        configuration: [Release]
        platform: [x64, arm64]
    runs-on: windows-latest
    if: ${{ github.event.pull_request.user.login != 'weblate' }}
    env:
      Solution_Name: NickvisionTubeConverter.sln
    steps:
    - name: Checkout
      uses: actions/checkout@v3.5.0
      with:
        fetch-depth: 0
    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3.0.3
      with:
        dotnet-version: 7.0.x
    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.3.1
    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}
    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the pfx
      env:
         PfxPath: ${{ github.workspace }}\GitHubActionsWorkflow.pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.BASE64_ENCODED_PFX }}")
        $certificatePath = $env:PfxPath
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)
   # Create the app package by building and packaging the project
    - name: Create the app package
      run: msbuild $env:Solution_Name /p:Configuration=$env:Configuration /p:Platform=$env:Platform /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:AppxPackageSigningEnabled=true /p:PackageCertificateThumbprint="" /p:PackageCertificateKeyFile="$env:Pfx_Path" /p:AppxPackageDir="$env:Appx_Package_Dir" /p:GenerateAppxPackageOnBuild=true
      env:
        Pfx_Path: ${{ github.workspace }}\GitHubActionsWorkflow.pfx
        Appx_Bundle: Always
        Appx_Package_Build_Mode: StoreUpload
        Appx_Package_Dir: Packages\
        Configuration: ${{ matrix.configuration }}
        Platform: ${{ matrix.platform }}
    # Remove the pfx
    - name: Remove the pfx
      run: Remove-Item -path GitHubActionsWorkflow.pfx
    # Upload the app
    - name: Upload app
      uses: actions/upload-artifact@v3.1.2
      with:
        name: org.nickvision.tubeconverter-winui-${{ matrix.platform }}
        path: ${{ github.workspace }}\NickvisionTubeConverter.WinUI\Packages
  snap:
    name: "Snap"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86_64]
      fail-fast: false
    steps:
      - name: Checkout Git repository
        uses: actions/checkout@v3
      - name: Build Snap
        uses: snapcore/action-build@v1
        id: snapcraft-build
        with:
          snapcraft-args: "-v"
      - uses: actions/upload-artifact@v3
        with:
          name: tube-converter-snap_x86-64
          path: ${{ steps.snapcraft-build.outputs.snap }} 
      #- uses: diddlesnaps/snapcraft-review-action@v1
        #with:
          #snap: ${{ steps.snapcraft-build.outputs.snap }}
          #isClassic: 'false'          
      #- name: Upload and release tube-converter Snap
        #uses: snapcore/action-publish@v1
        #env: 
          #SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.STORE_LOGIN }}
        #with:
          #snap: ${{ steps.snapcraft-build.outputs.snap }}
          #release: ${{ startsWith(github.ref, 'refs/tags/') && 'candidate' || 'edge'}}
